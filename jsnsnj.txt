local function trackupdate(track)
    -- Ensure the track is valid and playing before modifying
    if track and track.IsPlaying then
        -- Increment TimePosition safely
        local increment = track.Length / 10
        if track.TimePosition + increment <= track.Length then
            track.TimePosition = track.TimePosition + increment
        else
            track.TimePosition = track.Length
        end

        -- Adjust the speed if needed
        track:AdjustSpeed(0)
    end
end

local function adjustAnimationSpeed()
    -- Get the player's character and humanoid
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:WaitForChild("Humanoid")

    -- Iterate over all loaded animations on the Animator
    while wait(0.1) do -- Use a controlled loop to prevent performance issues
        for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do
            trackupdate(track)
        end
    end
end





local function bypassio()
Notify("Later..", "Fuck Tags!, Not Like this", 5)
end


local function PLZ()
    -- Gаzеr code execution
    -- Place this part in StarterPlayer > StarterPlayerScripts
    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer
    local playerGui = LocalPlayer:WaitForChild("PlayerGui")

    -- Create ScreenGui
    local screenGui = Instance.new("ScreenGui")
    screenGui.Parent = playerGui

    -- Create a frame to hold the bar
    local frame = Instance.new("Frame")
    frame.AnchorPoint = Vector2.new(0.5, 0.5)
    frame.Position = UDim2.new(0.5, 0, 0.5, 0)
    frame.Size = UDim2.new(0.3, 0, 0.05, 0)
    frame.Parent = screenGui

    -- Create the bar
    local bar = Instance.new("Frame")
    bar.Size = UDim2.new(0, 0, 1, 0) -- initial size of bar
    bar.BackgroundColor3 = Color3.new(0, 1, 0) -- green color
    bar.Parent = frame

    -- Create a text label
    local textLabel = Instance.new("TextLabel")
    textLabel.Text = "(〒⁠﹏⁠〒⁠) {Plz Donate}"
    textLabel.TextSize = 20
    textLabel.Size = UDim2.new(1, 0, 1, 0)
    textLabel.Position = UDim2.new(0, 0, -3, 0) -- adjust position if needed
    textLabel.Font = Enum.Font.SourceSansBold
    textLabel.TextColor3 = Color3.new(1, 1, 1) -- white color
    textLabel.BackgroundTransparency = 1 -- make the background invisible
    textLabel.Parent = frame

    -- Create a sound
    local sound = Instance.new("Sound")
    sound.SoundId = "rbxassetid://9048375035" -- replace with the correct sound ID
    sound.Looped = true
    sound.Parent = screenGui
    sound:Play()

    -- Define a max loudness
    local maxLoudness = 500

    -- Animation variables
    local amplitude = 0
    local animationSpeed = 1 -- adjust speed as needed

    -- Animate the amplitude bar
    while true do
        local loudness = sound.PlaybackLoudness
        if loudness then
            amplitude = math.clamp(loudness / maxLoudness, 0, 1)
        else
            amplitude = 0
        end
        

        -- Smooth swinging animation
        local swing = 0.1 * math.sin(tick() * animationSpeed * 2 * math.pi / 3) -- swing every 3 seconds
        frame.Position = UDim2.new(0.5 + swing, 0, 0.5, 0)

        bar.Size = UDim2.new(amplitude, 0, 1, 0)
        wait(0.05)
    end
    end
    





local function LagFps()
game:GetService("NetworkClient"):SetOutgoingKBPSLimit(math.huge)
local Players = game:GetService("Players")
local player = Players.LocalPlayer

-- Function to apply the low FPS effect to animations
local function applyLowFPSEffect(animationTrack)
    local originalSpeed = animationTrack.Speed

    while animationTrack.IsPlaying do
    if animationTrack.Speed <= originalSpeed then
   local originalSpeed = animationTrack.Speed 
   end
        task.wait(0.1) -- Freeze the animation for 0.05 seconds
        animationTrack.TimePosition = animationTrack.TimePosition + animationTrack.TimePosition / 10
        task.wait(0.1)
        animationTrack:AdjustSpeed(0) -- Pause again
    end
end

-- Function to monitor animation tracks
local function monitorAnimations(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(function(animationTrack)
            applyLowFPSEffect(animationTrack)
        end)
    end
end

-- Monitor the player's character
player.CharacterAdded:Connect(monitorAnimations)
if player.Character then
    monitorAnimations(player.Character)
end
end




local CurrentIdle = "Zombie"
local CurrentWalk = "None"
local CurrentRun = "Zombie"
local CurrentJump = "OldSchool"
local CurrentFall = "Mage"
local CurrentSwimIdle = "None"
local CurrentSwim = "None"
local CurrentClimb = "None"
local HttpService = game:GetService("HttpService")


local Players = game:GetService("Players")
local speaker = Players.LocalPlayer
    local Char = speaker.Character
        local Animate = Char.Animate


local function Wait1()
 local player = game.Players.LocalPlayer
  local character = player.Character or player.CharacterAdded:Wait()
   local humanoid = character:WaitForChild("Humanoid")
    while humanoid.Health <= 2 do
      task.wait(0.3) -- Wait for 0.1 seconds before checking again
       end
        end
        
        



local function Wait2()
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
    while humanoid:GetState() == Enum.HumanoidStateType.Dead or 
          humanoid:GetState() == Enum.HumanoidStateType.Ragdoll do
        task.wait(0.3)  -- wait for a short period before checking again
    end
end





local lastAnimations = {} -- Table to store last used animations

local function StopAnim()
    local speaker = Players.LocalPlayer
    local Char = speaker.Character
    local Hum = Char:FindFirstChildOfClass("Humanoid") or Char:FindFirstChildOfClass("AnimationController")

    -- Stop all playing animation tracks
    for _, v in next, Hum:GetPlayingAnimationTracks() do
    
        v:Stop()
    end
    end

local function refresh()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:WaitForChild("Humanoid")

    humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
    
end

local function refreshswim()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:WaitForChild("Humanoid")

    humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
    task.wait(0.1)
    humanoid:ChangeState(Enum.HumanoidStateType.Swimming)
    
end


local function refreshclimb()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:WaitForChild("Humanoid")

    humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
    task.wait(0.1)
    humanoid:ChangeState(Enum.HumanoidStateType.Climbing)
    
end

-- Define the animations table with animation IDs
local Animations = {
    Idle = {
    
Astronaut = {"891621366", "891633237"},
Bold = {"16738333868", "16738334710"},
Borock = {"3293641938", "3293642554"},
Bubbly = {"910004836", "910009958"},
Cartoony = {"742637544", "742638445"},
Confident = {"1069977950", "1069987858"},
Cowboy = {"1014390418", "1014398616"},
["Drooling Zombie"] = {"3489171152", "3489171152"},
Elder = {"10921101664", "10921102574"},
Ghost = {"616006778","616008087"},
Knight = {"657595757", "657568135"},
Levitation = {"616006778", "616008087"},
Mage = {"707742142", "707855907"},
MrToilet = {"4417977954", "4417978624"},
Ninja = {"656117400", "656118341"},
NFL = {"92080889861410", "74451233229259"},
OldSchool = {"10921230744", "10921232093"},
Patrol = {"1149612882", "1150842221"},
Pirate = {"750781874", "750782770"},
Popstar = {"1212900985", "1150842221"},
Princess = {"941003647", "941013098"},
R6 = {"12521158637","12521162526"},
["R15 Reanimated"] = {"4211217646", "4211218409"},
Realistic = {"17172918855", "17173014241"},
Robot = {"616088211", "616089559"},
Sneaky = {"1132473842", "1132477671"},
["Sports (Adidas)"] = {"18537376492", "18537371272"},
Soldier = {"3972151362", "3972151362"},
Stylish = {"616136790", "616138447"},
["Stylized Female"] = {"4708191566", "4708192150"},
Superhero = {"10921288909", "10921290167"},
Toy = {"782841498", "782845736"},
Udzal = {"3303162274", "3303162549"},
Vampire = {"1083445855", "1083450166"},
Werewolf = {"1083195517", "1083214717"},
["Wicked (Popular)"] = {"118832222982049", "76049494037641"},
["No Boundaries (Walmart)"] = {"18747067405", "18747063918"},
Zombie = {"616158929", "616160636"},
    },
    Walk = {
["2016 Animation (mm2)"] = "387947975",
Astronaut = "891667138",
Bold = "16738340646",
Bubbly = "910034870",
Cartoony = "742640026",
Confident = "1070017263",
Cowboy = "1014421541",
["Drooling Zombie"] = "3489174223",
Elder = "10921111375",
Ghost = "616013216",
Knight = "10921127095",
Levitation = "616013216",
Mage = "707897309",
Ninja = "656121766",
NFL = "110358958299415",
OldSchool = "10921244891",
Patrol = "1151231493",
Pirate = "750785693",
Popstar = "1212980338",
Princess = "941028902",
R6 = "12518152696",
["R15 Reanimated"] = "4211223236",
["2016 Animation (mm2)"] = "4211223236",
Robot = "616095330",
Sneaky = "1132510133",
["Sports (Adidas)"] = "18537392113",
Stylish = "616146177",
["Stylized Female"] = "4708193840",
Superhero = "10921298616",
Toy = "782843345",
Udzal = "3303162967",
Vampire = "1083473930",
Werewolf = "1083178339",
["Wicked (Popular)"] = "92072849924640",
["No Boundaries (Walmart)"] = "18747074203",
Zombie = "616168032",
    },
    Run = {
["2016 Animation (mm2)"] = "387947975",
Astronaut = "10921039308",
Bold = "16738337225",
Bubbly = "10921057244",
Cartoony = "10921076136",
Confident = "1070001516",
Cowboy = "1014401683",
["Drooling Zombie"] = "3489173414",
Elder = "10921104374",
Ghost = "616013216",
["Heavy Run (Udzal / Borock)"] = "3236836670",
Knight = "10921121197",
Levitation = "616010382",
Mage = "10921148209",
MrToilet = "4417979645",
Ninja = "656118852",
NFL = "117333533048078",
OldSchool = "10921240218",
Patrol = "1150967949",
Pirate = "750783738",
Popstar = "1212980348",
Princess = "941015281",
["2016 Animation (mm2)"] = "4211220381",
R6 = "12518152696",
["R15 Reanimated"] = "4211220381",
Robot = "10921250460",
Sneaky = "1132494274",
["Sports (Adidas)"] = "18537384940",
Stylish = "10921276116",
["Stylized Female"] = "4708192705",
Superhero = "10921291831",
Toy = "10921306285",
Vampire = "10921320299",
Werewolf = "10921336997",
["Wicked (Popular)"] = "72301599441680",
["No Boundaries (Walmart)"] = "18747070484",
Zombie = "616163682",
    },
    Jump = {
    Astronaut = "891627522",
    Bold = "16738336650",
    Bubbly = "910016857",
    Cartoony = "742637942",
    Confident = "1069984524",
    Cowboy = "1014394726",
    Elder = "10921107367",
    Ghost = "616008936",
    Knight = "910016857",
    Levitation = "616008936",
    Mage = "10921149743",
    Ninja = "656117878",
    NFL = "119846112151352",
    OldSchool = "10921242013",
    Patrol = "1148811837",
    Pirate = "750782230",
    Popstar = "1212954642",
    Princess = "941008832",
    Robot = "616090535",
    ["R15 Reanimated"] = "4211219390",
    R6 = "12520880485",
    Sneaky = "1132489853",
    ["Sports (Adidas)"] = "18537380791",
    Stylish = "616139451",
    ["Stylized Female"] = "4708188025",
    Superhero = "10921294559",
    Toy = "10921308158",
    Vampire = "1083455352",
    Werewolf = "1083218792",
    ["Wicked (Popular)"] = "104325245285198",
    ["No Boundaries (Walmart)"] = "18747069148",
    Zombie = "616161997",
},
    Fall = {
    Astronaut = "891617961",
    Bold = "16738333171",
    Bubbly = "910001910",
    Cartoony = "742637151",
    Confident = "1069973677",
    Cowboy = "1014384571",
    Elder = "10921105765",
    Knight = "10921122579",
    Levitation = "616005863",
    Mage = "707829716",
    Ninja = "656115606",
    NFL = "129773241321032",
    OldSchool = "10921241244",
    Patrol = "1148863382",
    Pirate = "750780242",
    Popstar = "1212900995",
    Princess = "941000007",
    Robot = "616087089",
    ["R15 Reanimated"] = "4211216152",
    R6 = "12520972571",
    Sneaky = "1132469004",
    ["Sports (Adidas)"] = "18537367238",
    Stylish = "616134815",
    ["Stylized Female"] = "4708186162",
    Superhero = "10921293373",
    Toy = "782846423",
    Vampire = "1083443587",
    Werewolf = "1083189019",
    ["Wicked (Popular)"] = "121152442762481",
    ["No Boundaries (Walmart)"] = "18747062535",
    Zombie = "616157476",
},
    SwimIdle = {
    Astronaut = "891663592",
    Bold = "16738339817",
    Bubbly = "910030921",
    Cartoony = "10921079380",
    Confident = "1070012133",
    CowBoy = "1014411816",
    Elder = "10921110146",
    Mage = "707894699",
    Ninja = "656118341",
    NFL = "79090109939093",
    Patrol = "1151221899",
    Knight = "10921125935",
    OldSchool = "10921244018",
    Levitation = "10921139478",
    Patrol = "1151221899",
    Popstar = "1212998578",
    Princess = "941025398",
    Pirate = "750785176",
    R6 = "12518152696",
    Robot = "10921253767",
    Sneaky = "1132506407",
    ["Sports (Adidas)"] = "18537387180",
    Stylish = "10921281964",
    Stylized = "4708190607",
    SuperHero = "10921297391",
    Toy = "10921310341",
    Vampire = "10921325443",
    Werewolf ="10921341319",
    ["Wicked (Popular)"] = "113199415118199",
    ["No Boundaries (Walmart)"] = "18747071682",
    
    
},
    Swim = {
    Astronaut = "891663592",
    Bubbly = "910028158",
    Bold = "16738339158",
    Cartoony = "10921079380",
    CowBoy = "1014406523",
    Confident = "1070009914",
    Elder = "10921108971",
    Knight = "10921125160",
    Mage = "707876443",
    NFL = "132697394189921",
    OldSchool = "10921243048",
    PopStar = "1212998578",
    Princess = "941018893",
    Pirate = "750784579",
    Patrol = "1151204998",
    R6 = "12518152696",
    Robot = "10921253142",
    Levitation = "10921138209",
    Stylish = "10921281000",
    SuperHero = "10921295495",
    Sneaky = "1132500520",
    ["Sports (Adidas)"] = "18537389531",
    Toy = "10921309319",
    Vampire = "10921324408",
    Werewolf = "10921340419",
    ["Wicked (Popular)"] = "99384245425157",
    ["No Boundaries (Walmart)"] = "18747073181",
    Zombie = "616165109",
    
},
   Climb = {
Astronaut = "10921032124",
Bold = "16738332169",
Cartoony = "742636889",
Confident = "1069946257",
CowBoy = "1014380606",
Elder = "845392038",
Ghost = "616003713",
Knight = "10921125160",
Levitation = "10921132092",
Mage = "707826056",
Ninja = "656114359",
NFL = "134630013742019",
OldSchool = "10921229866",
Patrol = "1148811837",
Popstar = "1213044953",
Princess = "940996062",
R6 = "12520982150",
["Reanimated R15"] = "4211214992",
Robot = "616086039",
Sneaky = "1132461372",
["Sports (Adidas)"] = "18537363391",
Stylish = "10921271391",
["Stylized Female"] = "4708184253",
SuperHero = "10921286911",
Toy = "10921300839",
Vampire = "1083439238",
WereWolf = "10921329322",
["Wicked (Popular)"] = "131326830509784",
["No Boundaries (Walmart)"] = "18747060903",
Zombie = "616156119"
}}



local function loadAnimation(animationId)
    -- Get the local player's character
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()

    -- Create a new animation instance
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. tostring(animationId)

    -- Load the animation into the humanoid
    local humanoid = character:WaitForChild("Humanoid")
    local animationTrack = humanoid:LoadAnimation(animation)

    return animationTrack
end



for animationType, animationSets in pairs(Animations) do
    for setName, ids in pairs(animationSets) do
        if type(ids) == "table" then
            for _, id in ipairs(ids) do
                local anim = loadAnimation(id)
                
            end
        else
            local anim = loadAnimation(ids)
            
        end
    end
end






local function Buy(gamePassID)
    local MarketplaceService = game:GetService("MarketplaceService")
    local success, errorMessage = pcall(function()
        MarketplaceService:PromptGamePassPurchase(game:GetService("Players").LocalPlayer, gamePassID)
    end)
    
    if not success then
        setclipboard("https://www.roblox.com/game-pass/" .. gamePassID)
        Notify("Copied", "Gamepass Link", 5)
    end
end

-- Function to reset idle animation
local function ResetIdle()


    local speaker = Players.LocalPlayer
    local Char = speaker.Character
    local Hum = Char:FindFirstChildOfClass("Humanoid") or Char:FindFirstChildOfClass("AnimationController")
    -- Stop all playing animation tracks
    for _, v in next, Hum:GetPlayingAnimationTracks() do
    
    
        v:Stop()
    end

    -- Disable idle Animation
    local Animate = Char.Animate
    Animate.idle.Animation1.AnimationId = "http://www.roblox.com/asset/?id=0"
    Animate.idle.Animation2.AnimationId = "http://www.roblox.com/asset/?id=0"
end

-- Function to reset walk animation
local function ResetWalk()

    local speaker = Players.LocalPlayer
    local Char = speaker.Character
    local Hum = Char:FindFirstChildOfClass("Humanoid") or Char:FindFirstChildOfClass("AnimationController")

    -- Stop all playing animation tracks
    for _, v in next, Hum:GetPlayingAnimationTracks() do
    
        v:Stop()
    end

    -- Disable walk Animation
    local Animate = Char.Animate
    Animate.walk.WalkAnim.AnimationId = "http://www.roblox.com/asset/?id=0"
    
end

-- Function to reset run animation

local function ResetRun()

    local speaker = Players.LocalPlayer
    local Char = speaker.Character
    local Hum = Char:FindFirstChildOfClass("Humanoid") or Char:FindFirstChildOfClass("AnimationController")

    -- Stop all playing animation tracks
    for _, v in next, Hum:GetPlayingAnimationTracks() do
    
        v:Stop()
    end

    -- Dont Change it to task.wait
    wait(0.1)

    -- Disable run Animation
    local Animate = Char.Animate
    Animate.run.RunAnim.AnimationId = "http://www.roblox.com/asset/?id=0"
    
end

local function ResetJump()

    local speaker = Players.LocalPlayer
    local Char = speaker.Character
    local Hum = Char:FindFirstChildOfClass("Humanoid") or Char:FindFirstChildOfClass("AnimationController")

    -- Stop all playing animation tracks
    for _, v in next, Hum:GetPlayingAnimationTracks() do
    
        v:Stop()
    end

    -- Dont Change it to task.wait
    wait(0.1)

    -- Disable jump Animation
    local Animate = Char.Animate
    Animate.jump.JumpAnim.AnimationId = "http://www.roblox.com/asset/?id=0"
    
end

-- Function to reset fall animation
local function ResetFall()

    local speaker = Players.LocalPlayer
    local Char = speaker.Character
    local Hum = Char:FindFirstChildOfClass("Humanoid") or Char:FindFirstChildOfClass("AnimationController")

    -- Stop all playing animation tracks
    for _, v in next, Hum:GetPlayingAnimationTracks() do
    
        v:Stop()
    end

    -- Disable fall Animation
    local Animate = Char.Animate
    Animate.fall.FallAnim.AnimationId = "http://www.roblox.com/asset/?id=0"
    
end

local function ResetSwim()

    local speaker = Players.LocalPlayer
    local Char = speaker.Character
    local Hum = Char:FindFirstChildOfClass("Humanoid") or Char:FindFirstChildOfClass("AnimationController")

    -- Stop all playing animation tracks
    for _, v in next, Hum:GetPlayingAnimationTracks() do
    
        v:Stop()
    end

    -- Disable swim Animation
    local Animate = Char.Animate
    Animate.swim.Swim.AnimationId = "http://www.roblox.com/asset/?id=0"
    
end



local function ResetSwimIdle()

    local speaker = Players.LocalPlayer
    local Char = speaker.Character
    local Hum = Char:FindFirstChildOfClass("Humanoid") or Char:FindFirs        
    elseif animationType == "Fall" then
        lastAnimations.Fall = animationId
        ResetFall()
           Animate.fall.FallAnim.AnimationId = "http://www.roblox.com/asset/?id=" .. animationId
        refresh()
        
        
    elseif animationType == "Swim" then
    lastAnimations.Swim = animationId
    ResetSwim()
    Animate.swim.Swim.AnimationId = "http://www.roblox.com/asset/?id=" .. animationId
    refreshswim()
    
elseif animationType == "SwimIdle" then
    lastAnimations.SwimIdle = animationId
    ResetSwimIdle()
    Animate.swimidle.SwimIdle.AnimationId = "http://www.roblox.com/asset/?id=" .. animationId
    refreshswim()
    
    elseif animationType == "Climb" then
    lastAnimations.Climb = animationId
    ResetClimb()
    Animate.climb.ClimbAnim.AnimationId = "http://www.roblox.com/asset/?id=" .. animationId
    refreshclimb()
end  
wait()
unfreeze()
end






local function PlayEmote(animationId)
StopAnim()
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId
    local animationTrack = humanoid:LoadAnimation(animation)
    animationTrack:Play()
    local function onMoved()
    local moveDirection = humanoid.MoveDirection
    if moveDirection.Magnitude > 0 or moveDirection.Y ~= 0 then
        animationTrack:Stop()
    end
end
    local checkMovement
    checkMovement = game:GetService("RunService").RenderStepped:Connect(onMoved)
end





local function UpdaLabel(type,name)
if type == "Idle" then
        CurrentIdle = name
    elseif type == "Walk" then
        CurrentWalk = name
    elseif type == "Run" then
        CurrentRun = name
    elseif type == "Jump" then
        CurrentJump = name
    elseif type == "Fall" then
        CurrentFall = name
    elseif type == "SwimIdle" then
        CurrentSwimIdle = name
    elseif type == "Swim" then
    CurrentSwim = name
    elseif type == "Climb" then
    CurrentClimb = name
    end
IdleLabel:UpdateLabel("Current Idle Animation = " .. CurrentIdle)
WalkLabel:UpdateLabel("Current Walk Animation = " .. CurrentWalk)
RunLabel:UpdateLabel("Current Run Animation = " .. CurrentRun)
JumpLabel:UpdateLabel("Current Jump Animation = " .. CurrentJump)
FallLabel:UpdateLabel("Current Fall Animation = " .. CurrentFall)
SwimIdleLabel:UpdateLabel("Current Swim Idle Animation = " .. CurrentSwimIdle)
SwimLabel:UpdateLabel("Current Swim Animation = " .. CurrentSwim)         
ClimbLabel:UpdateLabel("Current Climb Animation = " .. CurrentClimb)
end